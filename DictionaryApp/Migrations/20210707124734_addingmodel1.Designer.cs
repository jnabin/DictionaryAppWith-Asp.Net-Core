// <auto-generated />
using DictionaryApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DictionaryApp.Migrations
{
    [DbContext(typeof(DictContext))]
    [Migration("20210707124734_addingmodel1")]
    partial class addingmodel1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("DictionaryApp.Models.BanglaWord", b =>
                {
                    b.Property<int>("BanglaWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("text")
                        .HasColumnType("TEXT");

                    b.HasKey("BanglaWordId");

                    b.ToTable("BanglaWords");
                });

            modelBuilder.Entity("DictionaryApp.Models.BanglaWordMapping", b =>
                {
                    b.Property<int>("BanglaWordMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BanglaWordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BanglaWordMappingId");

                    b.HasIndex("BanglaWordId");

                    b.HasIndex("WordId");

                    b.ToTable("BanglaWordMappings");
                });

            modelBuilder.Entity("DictionaryApp.Models.Noun", b =>
                {
                    b.Property<int>("NounId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NounMappingWordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NounId");

                    b.HasIndex("NounMappingWordId");

                    b.HasIndex("WordId");

                    b.ToTable("Nouns");
                });

            modelBuilder.Entity("DictionaryApp.Models.ProNoun", b =>
                {
                    b.Property<int>("ProNounId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProNounMappingWordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProNounId");

                    b.HasIndex("ProNounMappingWordId");

                    b.HasIndex("WordId");

                    b.ToTable("ProNouns");
                });

            modelBuilder.Entity("DictionaryApp.Models.Sentence", b =>
                {
                    b.Property<int>("SentenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SentenceText")
                        .HasColumnType("TEXT");

                    b.HasKey("SentenceId");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("DictionaryApp.Models.Word", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WordId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("DictionaryApp.Models.WordSentence", b =>
                {
                    b.Property<int>("WordSentenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WordSentenceId");

                    b.HasIndex("SentenceId");

                    b.HasIndex("WordId");

                    b.ToTable("WordSentences");
                });

            modelBuilder.Entity("DictionaryApp.Models.BanglaWordMapping", b =>
                {
                    b.HasOne("DictionaryApp.Models.BanglaWord", "banglaWord")
                        .WithMany("banglaWordMappings")
                        .HasForeignKey("BanglaWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Word", "word")
                        .WithMany("banglaWordMappings")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("banglaWord");

                    b.Navigation("word");
                });

            modelBuilder.Entity("DictionaryApp.Models.Noun", b =>
                {
                    b.HasOne("DictionaryApp.Models.Word", "NounMappingWord")
                        .WithMany("nounMapping")
                        .HasForeignKey("NounMappingWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Word", "word")
                        .WithMany("nouns")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NounMappingWord");

                    b.Navigation("word");
                });

            modelBuilder.Entity("DictionaryApp.Models.ProNoun", b =>
                {
                    b.HasOne("DictionaryApp.Models.Word", "ProNounMappingWord")
                        .WithMany("proNounMapping")
                        .HasForeignKey("ProNounMappingWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Word", "word")
                        .WithMany("proNouns")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProNounMappingWord");

                    b.Navigation("word");
                });

            modelBuilder.Entity("DictionaryApp.Models.WordSentence", b =>
                {
                    b.HasOne("DictionaryApp.Models.Sentence", "Sentence")
                        .WithMany("wordSentences")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryApp.Models.Word", "Word")
                        .WithMany("wordSentences")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("DictionaryApp.Models.BanglaWord", b =>
                {
                    b.Navigation("banglaWordMappings");
                });

            modelBuilder.Entity("DictionaryApp.Models.Sentence", b =>
                {
                    b.Navigation("wordSentences");
                });

            modelBuilder.Entity("DictionaryApp.Models.Word", b =>
                {
                    b.Navigation("banglaWordMappings");

                    b.Navigation("nounMapping");

                    b.Navigation("nouns");

                    b.Navigation("proNounMapping");

                    b.Navigation("proNouns");

                    b.Navigation("wordSentences");
                });
#pragma warning restore 612, 618
        }
    }
}
